# This viminfo file was generated by Vim 7.4.
# You may edit it if you're careful!

# Value of 'encoding' when this file was written
*encoding=utf-8


# hlsearch on (H) or off (h):
~H
# Command Line History (newest to oldest):
:wq
:x
:q
:q!
:X
:Q

# Search String History (newest to oldest):

# Expression History (newest to oldest):

# Input Line History (newest to oldest):

# Input Line History (newest to oldest):

# Registers:
"0	LINE	0
	[a-zA-Z][a-zA-Z0-9|_]*[a-zA-Z0-9]	{printf("IDENT %s\n", yytext); currPos += yyleng;}
"1	CHAR	0
	286
<	FUNCTION IDENT SEMICOLON BEGIN_PARAMS declarations END_PARAMS BEGIN_LOCALS declarations END_LOCALS BEGIN_BODY statements END_BODY {printf("FUNCTION IDENT %s  SEMICOLON BEGIN_PARAMS declarations END_PARAMS BEGIN_LOCALS declarations END_LOCALS BEGIN_BODY statements END_BODY\n", $2);}
			
"2	CHAR	0
	%{
	 #include <stdio.h>
	 #include <stdlib.h>
	 void yyerror(const char *msg);
	 extern int currLine;
	 extern int currPos;
	 FILE * yyin;
	 extern int yyleng;
	%}
	
	%union{
	 int ival;
	 char* dval;
	}
	
	%error-verbose
	%start	prog_start
	
	%token	FUNCTION 
	%token BEGIN_PARAMS 
	%token END_PARAMS 
	%token BEGIN_LOCALS 
	%token END_LOCALS 
	%token BEGIN_BODY 
	%token END_BODY 
	%token INTEGER 
	%token ARRAY 
	%token OF 
	%token IF 
	%token THEN 
	%token ENDIF 
	%token ELSE 
	%token WHILE 
	%token DO 
	%token BEGINLOOP 
	%token ENDLOOP
	%token CONTINUE 
	%token READ 
	%token WRITE 
	%token TRUE 
	%token FALSE 
	%token SEMICOLON 
	%token COLON 
	%token COMMA 
	%token L_PAREN 
	%token R_PAREN 
	%token L_SQUARE 
	%token R_SQUARE 
	%token ASSIGN 
	%token RETURN
"3	CHAR	0
	ElseStatement:   %empty
			 {printf("ElseStatement -> epsilon\n");}
	                 | ELSE statements
			 {printf("ElseStatement -> ELSE statements\n");}
	;
	
"4	CHAR	0
	
	statement:	aa{printf("statement -> aa");}
			| bb{printf("statement -> bb");}
			| cc{printf("statement -> cc");}
			| dd{printf("statement -> dd");}
			| ee{printf("statement -> ee");}
			| ff{printf("statement -> ff");}
			| gg{printf("statement -> gg");}
			| hh{printf("statement -> hh");}
			;
	
	aa:		var ASSIGN expression{printf("aa -> var ASSIGN expression");}
			;
	
	bb:		IF boolean_expr THEN statements ENDIF {cout<<"bb -> IF boolean_expr THEN statements ENDIF"<<endl;}
			| IF boolean_expr THEN statements ELSE statements ENDIF {cout<<"IF boolean_expr THEN statements ELSE statements ENDIF"<<endl;}
			;
	
	cc:		WHILE boolean_expr BEGINLOOP statements ENDLOOP {cout<<"cc  -> WHILE boolean_expr BEGINLOOP statements ENDLOOP"<<endl;}
			;
	
	dd:		DO BEGINLOOP statements ENDLOOP WHILE boolean_expr {cout<<"DO BEGINLOOP statements ENDLOOP WHILE boolean_expr"<<endl;}
			;
	
	ee:		READ var ii {cout<<"ee- > READ var ii"<<endl;}
			;
	
	ii:		 {cout<<"ii -> epsilon"<<endl;}
			| COMMA var ii {cout<<"ii -> COMMA var ii"<<endl;}
			;
	
	ff:		WRITE var ii {cout<<"ff -> WRITE var ii"<<endl;}
			;
	
	gg:		CONTINUE {cout<<"gg -> CONTINUE"<<endl;}
			;
	
	hh:		RETURN expression {cout<<"hh -> RETURN expression"<<endl;}
			;
"5	CHAR	0
	
	int:		INTEGER {cout<<"assign -> INTEGER"<<endl;}
			| ARRAY L_SQUARE NUMBERS R_SQUARE OF INTEGER {cout<<"assign -> ARRAY LSQUARE NUMBER "<<$3<<" RSQUARE OF INTEGER"<<endl;}
			
"6	CHAR	0
	
	prog_start:         %empty
	{printf("prog_start -> epsilon\n");}
	                 | Function 
			 {printf("prog_start -> Function\n");}
	;
	
	Function:        FUNCTION Ident SEMICOLON BEGIN_PARAMS Declarations END_PARAMS BEGIN_LOCALS Declarations END_LOCALS BEGIN_BODY Statements END_BODY
	{printf("Function -> FUNCTION Ident SEMICOLON BEGIN_PARAMS Declarations END_PARAMS BEGIN_LOCALS Declarations END_LOCALS BEGIN_BODY Statements END_BODY\n");}
	;
	
	Declaration:     Identifiers COLON INTEGER
	{printf("Declaration -> Identifiers COLON INTEGER\n");}
	                 | Identifiers COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER
			 {printf("Declaration -> Identifiers COLON ARRAY L_SQUARE_BRACKET NUMBER %d R_SQUARE_BRACKET OF INTEGER;\n", $5);}
	;
	Declarations:    %empty
	{printf("Declarations -> epsilon\n");}
	                 | Declaration SEMICOLON Declarations
			 {printf("Declarations -> Declaration SEMICOLON Declarations\n");}
	;
	
	Identifiers:     Ident
	{printf("Identifiers -> Ident \n");}
	                 | Ident COMMA Identifiers
			 {printf("Identifiers -> Ident COMMA Identifiers\n");}
	
	Statements:      Statement SEMICOLON Statements
	{printf("Statements -> Statement SEMICOLON Statements\n");}
	                 | Statement SEMICOLON
			 {printf("Statements -> Statement SEMICOLON\n");}
	;
	Statement:      Var ASSIGN Expression
	{printf("Statement -> Var ASSIGN Expression\n");}
	                 | IF BoolExp THEN Statements ElseStatement ENDIF
			 {printf("Statement -> IF BoolExp THEN Statements ElseStatement ENDIF\n");}		 
	                 | WHILE BoolExp BEGINLOOP Statements ENDLOOP
			 {printf("Statement -> WHILE BoolExp BEGINLOOP Statements ENDLOOP\n");}
	                 | DO BEGINLOOP Statements ENDLOOP WHILE BoolExp
			 {printf("Statement -> DO BEGINLOOP Statements ENDLOOP WHILE BoolExp\n");}
	                 | READ Vars
			 {printf("Statement -> READ Vars\n");}
	                 | WRITE Vars
			 {printf("Statement -> WRITE Vars\n");}
	                 | CONTINUE
			 {printf("Statement -> CONTINUE\n");}
	                 | RETURN Expression
			 {printf("Statement -> RETURN Expression\n");}
	;
	ElseStatement:   %empty
"7	LINE	0
	({DIGIT})+					{printf("NUMBER %s\n",yytext); currPos += yyleng;}
"8	LINE	0
	({DIGIT})+					{printf("NUMBER %s\n",yytext); currPos += yyleng;}
""-	CHAR	0
	p

# File marks:
'0  75  154  ~/mini_l.y
'1  77  0  ~/mini_l.y
'2  74  0  ~/mini_l.lex
'3  127  32  ~/mini_l.y
'4  6  0  ~/mini_l.lex
'5  95  0  ~/mini_l.y
'6  1  0  ~/fibonacci.min
'7  65  0  ~/mini_l.y
'8  74  48  ~/mini_l.y
'9  103  75  ~/mini_l.y

# Jumplist (newest first):
-'  75  154  ~/mini_l.y
-'  77  0  ~/mini_l.y
-'  127  2  ~/mini_l.y
-'  74  0  ~/mini_l.lex
-'  6  0  ~/mini_l.lex
-'  95  2  ~/mini_l.y
-'  33  0  ~/mini_l.lex
-'  65  0  ~/mini_l.y
-'  1  0  ~/fibonacci.min
-'  74  0  ~/mini_l.y
-'  103  3  ~/mini_l.y
-'  191  0  ~/mini_l.y
-'  71  2  ~/mini_l.y
-'  22  0  ~/mini_l.lex
-'  199  9  ~/mini_l.y
-'  4  1  ~/mini_l.y
-'  79  0  ~/mini_l.lex
-'  3  1  ~/mini_l.y
-'  4  0  ~/heading.h
-'  5  0  ~/heading.h
-'  78  0  ~/mini_l.y
-'  68  0  ~/mini_l.lex
-'  1  0  ~/heading.h
-'  77  0  ~/mini_l.lex
-'  21  0  ~/mini_l.lex
-'  70  0  ~/mini_l.lex
-'  1  0  ~/mini_l.lex
-'  90  2  ~/mini_l.y
-'  63  0  ~/mini_l.lex
-'  84  0  ~/mini_l.lex
-'  89  0  ~/mini_l.y
-'  68  0  ~/mini_l.y
-'  98  2  ~/mini_l.y
-'  212  0  ~/mini_l.y
-'  1  0  ~/mini_l.y
-'  2  1  ~/mini_l.y
-'  78  0  ~/mini_l.lex
-'  82  0  ~/mini_l.lex
-'  92  0  ~/mini_l.lex
-'  105  0  ~/mini_l.lex
-'  109  0  ~/mini_l.lex
-'  180  0  ~/mini_l.lex
-'  198  0  ~/mini_l.lex
-'  95  0  ~/mini_l.lex
-'  125  0  ~/mini_l.lex
-'  502  0  ~/mini_l.y
-'  164  0  ~/mini_l.lex
-'  163  0  ~/mini_l.lex
-'  1  0  ~/mini_l.lexer
-'  155  0  ~/mini_l.lex
-'  23  0  ~/fibonacci.min
-'  1  0  ~/fiboancci.min
-'  1  0  ~/test
-'  62  2  ~/primes.min
-'  8  0  ~/primes.min
-'  159  0  ~/mini_l.lex
-'  197  0  ~/mini_l.lex
-'  160  0  ~/mini_l.lex
-'  165  0  ~/mini_l.lex
-'  168  0  ~/mini_l.lex
-'  167  0  ~/mini_l.lex
-'  169  0  ~/mini_l.lex
-'  97  0  ~/mini_l.lex
-'  102  0  ~/mini_l.lex
-'  157  142  ~/mini_l.lex
-'  59  6  ~/mytest.min
-'  1  746  ~/mytest.min
-'  6  0  ~/primes.min
-'  1  0  ~/primes.min
-'  154  0  ~/mini_l.lex
-'  195  1  ~/mini_l.lex
-'  121  0  ~/mini_l.lex
-'  222  57  ~/mini_l.lex
-'  253  0  ~/mini_l.lex
-'  34  0  ~/calc.lex
-'  1  0  ~/calc.lex
-'  34  0  ~/calc.lex
-'  1  0  ~/calc.lex
-'  228  0  ~/mini_l.lex
-'  34  0  ~/calc.lex
-'  1  0  ~/calc.lex
-'  34  0  ~/calc.lex
-'  1  0  ~/calc.lex
-'  113  57  ~/mini_l.lex
-'  139  0  ~/mini_l.lex
-'  34  0  ~/calc.lex
-'  1  0  ~/calc.lex
-'  34  0  ~/calc.lex
-'  1  0  ~/calc.lex
-'  119  0  ~/mini_l.lex
-'  34  0  ~/calc.lex
-'  1  0  ~/calc.lex
-'  34  0  ~/calc.lex
-'  1  0  ~/calc.lex
-'  34  0  ~/calc.lex
-'  1  0  ~/calc.lex
-'  34  0  ~/calc.lex

# History of marks within files (newest to oldest):

> ~/mini_l.y
	"	75	154
	^	75	155
	.	75	155
	+	140	29
	+	141	30
	+	145	70
	+	149	31
	+	150	66
	+	151	66
	+	154	63
	+	158	34
	+	159	70
	+	160	68
	+	161	67
	+	164	50
	+	165	59
	+	166	67
	+	169	45
	+	170	54
	+	171	90
	+	174	84
	+	175	70
	+	178	58
	+	179	88
	+	182	48
	+	183	105
	+	94	67
	+	93	97
	+	77	0
	+	75	100
	+	74	23
	+	75	1
	+	77	0
	+	76	1
	+	75	36
	+	74	85
	+	75	98
	+	74	120
	+	75	133
	+	74	48
	+	65	0
	+	157	7
	+	154	57
	+	159	21
	+	160	20
	+	161	16
	+	169	4
	+	165	26
	+	174	8
	+	169	40
	+	170	43
	+	171	62
	+	165	61
	+	166	65
	+	174	57
	+	175	51
	+	178	14
	+	179	42
	+	178	8
	+	174	77
	+	178	44
	+	179	89
	+	166	32
	+	170	54
	+	145	56
	+	154	41
	+	158	19
	+	159	40
	+	160	39
	+	161	38
	+	159	62
	+	160	60
	+	161	59
	+	164	48
	+	171	87
	+	174	64
	+	175	57
	+	183	99
	+	187	38
	+	189	20
	+	130	5
	+	133	61
	+	126	49
	+	127	50
	+	126	16
	+	127	13
	+	122	8
	+	126	8
	+	118	24
	+	122	18
	+	123	25
	+	119	22
	+	118	52
	+	119	60
	+	122	50
	+	123	69
	+	126	35
	+	127	32
	+	65	0
	+	75	39
	+	75	159
	+	75	37
	+	75	155

> ~/mini_l.lex
	"	74	0
	^	33	34
	.	22	33
	+	23	49
	+	24	47
	+	25	45
	+	26	40
	+	27	35
	+	26	41
	+	28	35
	+	29	40
	+	30	42
	+	31	39
	+	32	41
	+	33	35
	+	34	50
	+	35	46
	+	36	47
	+	37	39
	+	38	41
	+	39	37
	+	40	51
	+	41	54
	+	42	57
	+	43	10
	+	42	9
	+	40	7
	+	41	8
	+	44	43
	+	46	61
	+	47	62
	+	48	64
	+	49	62
	+	50	62
	+	46	16
	+	47	16
	+	48	16
	+	49	16
	+	50	16
	+	52	60
	+	53	70
	+	54	69
	+	55	80
	+	54	70
	+	56	80
	+	52	17
	+	53	16
	+	54	16
	+	55	16
	+	56	16
	+	58	75
	+	59	66
	+	58	75
	+	61	66
	+	62	69
	+	64	63
	+	65	61
	+	66	60
	+	67	64
	+	68	63
	+	58	16
	+	59	16
	+	61	16
	+	62	17
	+	64	17
	+	65	16
	+	66	16
	+	67	17
	+	68	17
	+	73	57
	+	5	17
	+	6	37
	+	73	39
	+	77	35
	+	79	92
	+	77	90
	+	6	53
	+	79	93
	+	82	0
	+	82	120
	+	6	37
	+	66	44
	+	77	60
	+	79	49
	+	21	54
	+	77	53
	+	79	42
	+	77	90
	+	6	55
	+	77	67
	+	79	56
	+	6	19
	+	79	62
	+	77	73
	+	46	35
	+	52	36
	+	70	9
	+	62	15
	+	64	15
	+	67	15
	+	68	15
	+	23	32
	+	22	33

> ~/fibonacci.min
	"	1	0
	^	1	0
	.	2	0
	+	23	0
	+	1	0
	+	2	0

> ~/heading.h
	"	4	0
	^	4	0
	.	4	0
	+	5	0
	+	4	0
	+	2	0
	+	2	0
	+	3	0
	+	4	0

> ~/mini_l.lexer
	"	1	0

> ~/fiboancci.min
	"	1	0

> ~/test
	"	1	0

> ~/primes.min
	"	62	2
	^	1	3
	.	1	2
	+	62	0
	+	1	2
	e	1	0

> ~/mytest.min
	"	59	6
	^	59	7
	.	59	0
	+	1	746
	+	59	0

> ~/calc.lex
	"	34	0
	^	34	1
	.	34	0
	+	34	0
